package com.company;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.*;

class Solution {
    public static void main(String[] args) {
        Solution s = new Solution();
//        int[][] fares = {
//                {4, 1, 10}, {3, 5, 24}, {5, 6, 2}, {3, 1, 41}, {5, 1, 24}
//                , {4, 6, 50}, {2, 4, 66}, {2, 3, 22}, {1, 6, 25}};
        int[][] fares = {
                {2,6,6}, {6,3,7}, {4,6,7}, {6,5,11}, {2,5,12}, {5,3,20}, {2,4,8}, {4,3,9}};
        int solution = s.solution(6, 4, 5, 6, fares);
        System.out.println(solution);
    }
    int[][] distance;
    public int solution(int n, int s, int a, int b, int[][] fares) {
        distance = new int[n+1][n+1];
        for(int i = 0 ; i <= n ; i++)
            Arrays.fill(distance[i], 100000);

        for(int i = 1 ; i <= n ; i++)
            distance[i][i] = 0;

        for (int[] fare : fares) {
            int start = fare[0];
            int end = fare[1];
            int weight = fare[2];
            distance[start][end] = weight;
            distance[end][start] = weight;
        }

        for(int k = 1 ; k <= n ; k++){
            for(int i = 1 ; i <= n ; i++){
                for(int j = 1; j <= n ; j++){
                    distance[i][j] = Math.min(distance[i][j], distance[i][k] + distance[k][j]);
                }
            }
        }

        int minVal = distance[s][a] + distance[s][b];
        for(int i = 1 ; i < n+1 ; i++){
            minVal = Math.min(minVal, distance[s][i] + distance[i][a] +distance[i][b]);
        }
        return minVal;
    }

}
