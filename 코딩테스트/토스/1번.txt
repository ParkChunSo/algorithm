특정 언어를 하나 선택하여 hello world를 출력하는 소스 코드를 작성한다고 했을 때,
어떤 언어를 선택했는지 적어 주시고 해당 소스 코드가 실제 수행되는 전체적인 과정을 적어주십시오.

자바를 선택하였습니다.
hello word를 출력하는 소스 코드를 실행하게 되면 javac(자바 컴파일러)는 public static void main함수를 해당 클래스에서 찾게 됩니다. 찾은 main 함수는 String 배열을 인자로 받는데 이는 개발자가 컴파일할 때 넣은 변수를 받을 수 있습니다. javac는 해당 .java 코드를 바이트 코드로 변환(.class)합니다. 이 때 문제가 발생할 경우 컴파일 에러를 발생하며 컴파일을 중단합니다.
 컴파일이 성공적으로 수행된 경우 바이트 코드는 JVM의 Class Loader를 통해 JVM에 로딩을 하게 됩니다. Java의 가장 큰 장점인 운영체제의 독립적으로 수행되기 위해 바이트 코드는 JVM의 Execute Engine이 각 운영체제의 맞춰 한줄씩  기계어로 해석합니다. 한줄씩 해석하여 느려진 단점을 JIT를 사용하여 특정 시기에 코드뭉치를 한번에 기계어로 해석하며 보완하고 있습니다.
해석된 기계어는 Runtime Data Area에 배치되며 실질적으로 실행됩니다. 이 때 코드의 정보들이 저장되는 공간인 메소드 영역과 동적으로 메모리 할당하는 힙영역, 각 블록 작업이 실행될 때 사용하는 스택영역, 자바외 다른 언어를 저장하는 Native Method Area에 배치됩니다. 배치가 완료되면 실제 프로세스가 실행되며 hello world를 콘솔에 출력하게 됩니다.