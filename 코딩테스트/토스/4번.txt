저는 크게 서버 애플리케이션의 관점에서 외적인 문제와 내적인 문제로 나누어 생각하였습니다.
[외적인 문제]
첫번째로 외적인 문제는 해당 서버에서 의존하고 있는 타 서버의 문제가 있을 수 있다고 생각합니다. API를 사용하는 것과 같이 의존하고 있는 타 서버에 문제가 생겨 그 영향을 서버 애플리케이션도 받게되었으며 해당 문제는 타 서버를 담당하고 있는 담당자에게 건의해야하는 문제라 생각합니다.
 두번째는 DB의 문제입니다. DB의 디스크 에러(물리적 문제)로 인해 정상적인 서비스를 처리하지 못하거나 트렌젝션 락킹 레벨을 올려 동시요청이 증가하는 만큼의 처리가 이루어지지 못해 발생하는 문제를 말합니다. 디스크 에러와 같은 물리적인 문제가 발생했을 경우 빠르게 미러링된 DB로 전환하거나 복구하는 방법을 통해 개선 가능하며, 트랜젝션 락킹 문제의 경우 레벨을 내리거나 스케일 아웃을 통해 문제를 해결할 수 있습니다.

[내적인 문제] 
첫번째로 내적인 문제는 로드밸런싱 서버 문제입니다. 로드밸런싱 서버의 문제가 발생하여 트레픽을 균등하게 분산시키지 못하는 경우를 말합니다. 트레픽을 균등하게 분산시키지 못하고 하나의 서버에 치우치도록 문제가 생겨 다른 서버들은 작업이 없는 반면 하나의 서버만 서비스를 제공하고 있어 응답 지연이 발생하는 경우입니다. 이런 경우 로드밸런싱 서버의 문제점을 파악하고 해결하는 방법이 개선방법이라 할 수 있습니다.
두번재로 서버의 자체 문제입니다. CPU가 처리할 수 있는 비용을 벗어나는 것과 같이 하드웨어의 문제의 경우 스케일 업을 통해 성능을 향상시키거나 스케일 아웃을 통해 각 서버의 부담을 줄여주어 해결 가능합니다.